/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*/options{
    STATIC = false;
}
PARSER_BEGIN(Calculator)
public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
    public static void main(String[] args) throws ParseException, TokenMgrError{//\u6d63\u6ec6\ufffd\u6769\u6b13\u5677\u5a0c\u2103\u6e41\u9354\u720cublic,\u6769\u6b0e\u7d30\u9366\u3126\u7147\u6d5c\u6d99\u510f\u9350\u5178\u7b05\u6d5c\u0445\u6553\u95bf\u6b12\ue1e4\u951b\u5823\u7627\u5a09\ue7d2\u7d1a
            Calculator parser = new Calculator(System.in);
            SimpleNode root=parser.statement();
    }
}
PARSER_END(Calculator)

SKIP:{" "}
TOKEN:{< EOL: "\n"|"\r"|"\r\n">}
TOKEN:{
    < PLUS : "+">
|    < MINUS : "-">
|    < TIMES : "*">
|    < DIVIDE : "/">
|    < LPAREN : "(">
|    < RPAREN : ")">
}
TOKEN:{< NUMBER : (["0"-"9"])+ >}

SimpleNode procedure():
{/*@bgen(jjtree) procedure */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) procedure */
    try {
/*@egen*/
    (statement())+<EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode statement():
{/*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statement */
    try {
/*@egen*/
    expression()<EOL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expression():
{/*@bgen(jjtree) expression */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    int value;
    int tmp;
}
{/*@bgen(jjtree) expression */
    try {
/*@egen*/
    value=term()
    (
        (
            <PLUS>
            tmp=term()
            {value+=tmp;}
        )
        |
        (
            <MINUS>
            tmp=term()
            {value-=tmp;}
        )
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

int term():
{/*@bgen(jjtree) term */
    SimpleNode jjtn000 = new SimpleNode(JJTTERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    int value;
    int tmp;
}
{/*@bgen(jjtree) term */
    try {
/*@egen*/
    value=factor()
    (
        (
            <TIMES>
            tmp=factor()
            {value*=tmp;}
        )
        |
        (
            <DIVIDE>
            tmp=factor()
            {value/=tmp;}
        )
    )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return value;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

int factor():
{/*@bgen(jjtree) factor */
    SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    int value;
    Token token;
}
{/*@bgen(jjtree) factor */
    try {
/*@egen*/
    token=<NUMBER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {value=Integer.parseInt(token.image);}
    |
    <LPAREN>
    value=expression()
    <RPAREN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return value;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}